{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\workfolder\\\\frontDesafioDito\\\\pages\\\\auto-complete.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Autosuggest from 'react-autosuggest';\n\nconst getSuggestions = async value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  var eventData = await getEvents();\n  return inputLength === 0 ? [] : eventData.filter(it => it.event.toLowerCase().slice(0, inputLength) === inputValue);\n};\n\nconst getSuggestionValue = suggestion => suggestion.event; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, suggestion.event);\n\nconst getEvents = async () => {\n  const response = await fetch('http://localhost:3001/?evento=buy');\n  const body = await response.json();\n  return body;\n};\n\nclass Example extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _defineProperty(this, \"onChange\", (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsFetchRequested\", async ({\n      value\n    }) => {\n      this.setState({\n        suggestions: await getSuggestions(value)\n      });\n    });\n\n    _defineProperty(this, \"onSuggestionsClearRequested\", () => {\n      this.setState({\n        suggestions: []\n      });\n    });\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state;\n    const inputProps = {\n      placeholder: 'Digite um evento',\n      value,\n      onChange: this.onChange\n    };\n    return __jsx(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:\\workfolder\\frontDesafioDito\\pages\\auto-complete.js"],"names":["Autosuggest","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","eventData","getEvents","filter","it","event","slice","getSuggestionValue","suggestion","renderSuggestion","response","fetch","body","json","Example","React","Component","constructor","newValue","setState","suggestions","state","render","inputProps","placeholder","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested"],"mappings":";;;;AAAA,OAAOA,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,cAAc,GAAG,MAAMC,KAAN,IAAe;AACpC,QAAMC,UAAU,GAAGD,KAAK,CAACE,IAAN,GAAaC,WAAb,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AACA,MAAIC,SAAS,GAAG,MAAMC,SAAS,EAA/B;AAEA,SAAOH,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBE,SAAS,CAACE,MAAV,CAAiBC,EAAE,IACjDA,EAAE,CAACC,KAAH,CAASP,WAAT,GAAuBQ,KAAvB,CAA6B,CAA7B,EAAgCP,WAAhC,MAAiDH,UADnB,CAAhC;AAGD,CARD;;AAWA,MAAMW,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACH,KAApD,C,CAEA;;;AACA,MAAMI,gBAAgB,GAAGD,UAAU,IACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGA,UAAU,CAACH,KADd,CADF;;AAMA,MAAMH,SAAS,GAAG,YAAY;AAC5B,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,CAA5B;AACA,QAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA,SAAOD,IAAP;AACD,CALD;;AAOA,MAAME,OAAN,SAAsBC,KAAK,CAACC,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,GAAG;AACZ,YADY,CAGZ;AACA;AACA;AACA;AACA;;AAPY,sCAcH,CAACZ,KAAD,EAAQ;AAAEa,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZxB,QAAAA,KAAK,EAAEuB;AADK,OAAd;AAGD,KAlBa;;AAAA,yDAsBgB,OAAO;AAAEvB,MAAAA;AAAF,KAAP,KAAqB;AACjD,WAAKwB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAE,MAAM1B,cAAc,CAACC,KAAD;AADrB,OAAd;AAGD,KA1Ba;;AAAA,yDA6BgB,MAAM;AAClC,WAAKwB,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAjCa;;AAQZ,SAAKC,KAAL,GAAa;AACX1B,MAAAA,KAAK,EAAE,EADI;AAEXyB,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAuBDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE3B,MAAAA,KAAF;AAASyB,MAAAA;AAAT,QAAyB,KAAKC,KAApC;AAEA,UAAME,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,kBADI;AAEjB7B,MAAAA,KAFiB;AAGjB8B,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB;AAMA,WACE,MAAC,WAAD;AACE,MAAA,WAAW,EAAEL,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAKM,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKC,2BAHpC;AAIE,MAAA,kBAAkB,EAAEpB,kBAJtB;AAKE,MAAA,gBAAgB,EAAEE,gBALpB;AAME,MAAA,UAAU,EAAEc,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AAvDmC;;AA0DtC,eAAeT,OAAf","sourcesContent":["import Autosuggest from 'react-autosuggest';\r\n\r\nconst getSuggestions = async value => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  var eventData = await getEvents();\r\n\r\n  return inputLength === 0 ? [] : eventData.filter(it =>\r\n    it.event.toLowerCase().slice(0, inputLength) === inputValue\r\n  );\r\n};\r\n \r\n\r\nconst getSuggestionValue = suggestion => suggestion.event;\r\n \r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = suggestion => (\r\n  <div>\r\n    {suggestion.event}\r\n  </div>\r\n);\r\n\r\nconst getEvents = async () => {\r\n  const response = await fetch('http://localhost:3001/?evento=buy');\r\n  const body = await response.json();\r\n\r\n  return body;\r\n};\r\n \r\nclass Example extends React.Component {\r\n  constructor() {\r\n    super();\r\n \r\n    // Autosuggest is a controlled component.\r\n    // This means that you need to provide an input value\r\n    // and an onChange handler that updates this value (see below).\r\n    // Suggestions also need to be provided to the Autosuggest,\r\n    // and they are initially empty because the Autosuggest is closed.\r\n    this.state = {\r\n      value: '',\r\n      suggestions: []\r\n    };\r\n  }\r\n \r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n  };\r\n \r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  onSuggestionsFetchRequested = async ({ value }) => {\r\n    this.setState({\r\n      suggestions: await getSuggestions(value)\r\n    });\r\n  };\r\n \r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n \r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n \r\n    const inputProps = {\r\n      placeholder: 'Digite um evento',\r\n      value,\r\n      onChange: this.onChange\r\n    };\r\n \r\n    return (\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}