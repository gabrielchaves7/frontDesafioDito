{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\workfolder\\\\frontDesafioDito\\\\pages\\\\auto-complete.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Autosuggest from 'react-autosuggest';\nvar divStyle = {\n  margin: '40px',\n  width: '100%'\n};\n\nvar getSuggestions =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(value) {\n    var inputValue, inputLength, eventData;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            inputValue = value.trim().toLowerCase();\n            inputLength = inputValue.length;\n            _context.next = 4;\n            return getEvents();\n\n          case 4:\n            eventData = _context.sent;\n            return _context.abrupt(\"return\", inputLength === 0 ? [] : eventData.filter(function (it) {\n              return it.event.toLowerCase().slice(0, inputLength) === inputValue;\n            }));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getSuggestions(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getSuggestionValue = function getSuggestionValue(suggestion) {\n  return suggestion.event;\n}; // Use your imagination to render suggestions.\n\n\nvar renderSuggestion = function renderSuggestion(suggestion) {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, suggestion.event);\n};\n\nvar getEvents =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var response, body;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch('http://localhost:3001/?evento=buy');\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return response.json();\n\n          case 5:\n            body = _context2.sent;\n            return _context2.abrupt(\"return\", body);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getEvents() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar Example =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Example, _React$Component);\n\n  function Example() {\n    var _this;\n\n    _classCallCheck(this, Example);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Example).call(this)); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event, _ref3) {\n      var newValue = _ref3.newValue;\n\n      _this.setState({\n        value: newValue\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSuggestionsFetchRequested\",\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_ref4) {\n        var value;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                value = _ref4.value;\n                _context3.t0 = _this;\n                _context3.next = 4;\n                return getSuggestions(value);\n\n              case 4:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = {\n                  suggestions: _context3.t1\n                };\n\n                _context3.t0.setState.call(_context3.t0, _context3.t2);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x2) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onSuggestionsClearRequested\", function () {\n      _this.setState({\n        suggestions: []\n      });\n    });\n\n    _this.state = {\n      value: '',\n      suggestions: []\n    };\n    return _this;\n  }\n\n  _createClass(Example, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n      var inputProps = {\n        placeholder: 'Digite um evento',\n        value: value,\n        onChange: this.onChange\n      };\n      return __jsx(Autosuggest, {\n        suggestions: suggestions,\n        onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n        getSuggestionValue: getSuggestionValue,\n        renderSuggestion: renderSuggestion,\n        inputProps: inputProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Example;\n}(React.Component);\n\nexport default Example;","map":{"version":3,"sources":["C:\\workfolder\\frontDesafioDito\\pages\\auto-complete.js"],"names":["Autosuggest","divStyle","margin","width","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","getEvents","eventData","filter","it","event","slice","getSuggestionValue","suggestion","renderSuggestion","fetch","response","json","body","Example","newValue","setState","suggestions","state","inputProps","placeholder","onChange","onSuggestionsFetchRequested","onSuggestionsClearRequested","React","Component"],"mappings":"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","sourcesContent":["import Autosuggest from 'react-autosuggest';\r\n\r\n\r\nconst divStyle = {\r\n  margin: '40px',\r\n  width: '100%',\r\n};\r\n\r\nconst getSuggestions = async value => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  var eventData = await getEvents();\r\n\r\n  return inputLength === 0 ? [] : eventData.filter(it =>\r\n    it.event.toLowerCase().slice(0, inputLength) === inputValue\r\n  );\r\n};\r\n \r\n\r\nconst getSuggestionValue = suggestion => suggestion.event;\r\n \r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = suggestion => (\r\n  <div>\r\n    {suggestion.event}\r\n  </div>\r\n);\r\n\r\nconst getEvents = async () => {\r\n  const response = await fetch('http://localhost:3001/?evento=buy');\r\n  const body = await response.json();\r\n\r\n  return body;\r\n};\r\n \r\nclass Example extends React.Component {\r\n  constructor() {\r\n    super();\r\n \r\n    // Autosuggest is a controlled component.\r\n    // This means that you need to provide an input value\r\n    // and an onChange handler that updates this value (see below).\r\n    // Suggestions also need to be provided to the Autosuggest,\r\n    // and they are initially empty because the Autosuggest is closed.\r\n    this.state = {\r\n      value: '',\r\n      suggestions: []\r\n    };\r\n  }\r\n \r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n  };\r\n \r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  onSuggestionsFetchRequested = async ({ value }) => {\r\n    this.setState({\r\n      suggestions: await getSuggestions(value)\r\n    });\r\n  };\r\n \r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n \r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n \r\n    const inputProps = {\r\n      placeholder: 'Digite um evento',\r\n      value,\r\n      onChange: this.onChange\r\n    };\r\n \r\n    return (\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;"]},"metadata":{},"sourceType":"module"}