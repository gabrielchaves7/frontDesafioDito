{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.8c4abb40ff16881ee286.hot-update.js","sources":["webpack:///./pages/auto-complete.js"],"sourcesContent":["import Autosuggest from 'react-autosuggest';\r\n\r\nconst getSuggestions = async value => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n  var eventData = await getEvents();\r\n\r\n  return inputLength === 0 ? [] : eventData.filter(it =>\r\n    it.event.toLowerCase().slice(0, inputLength) === inputValue\r\n  );\r\n};\r\n \r\n\r\nconst getSuggestionValue = suggestion => suggestion.event;\r\n \r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = suggestion => (\r\n  <div>\r\n    {suggestion.event}\r\n  </div>\r\n);\r\n\r\nconst getEvents = async () => {\r\n  const response = await fetch('http://localhost:3001/?evento=buy');\r\n  const body = await response.json();\r\n\r\n  return body;\r\n};\r\n \r\nclass Example extends React.Component {\r\n  constructor() {\r\n    super();\r\n \r\n    // Autosuggest is a controlled component.\r\n    // This means that you need to provide an input value\r\n    // and an onChange handler that updates this value (see below).\r\n    // Suggestions also need to be provided to the Autosuggest,\r\n    // and they are initially empty because the Autosuggest is closed.\r\n    this.state = {\r\n      value: '',\r\n      suggestions: []\r\n    };\r\n  }\r\n \r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n  };\r\n \r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  onSuggestionsFetchRequested = async ({ value }) => {\r\n    this.setState({\r\n      suggestions: await getSuggestions(value)\r\n    });\r\n  };\r\n \r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n \r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n \r\n    const inputProps = {\r\n      placeholder: 'Digite um evento',\r\n      value,\r\n      onChange: this.onChange\r\n    };\r\n \r\n    return (\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={getSuggestionValue}\r\n        renderSuggestion={renderSuggestion}\r\n        inputProps={inputProps}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAKA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AARA;AAcA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AAFA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAvBA;AAAA;AAAA;AAAA;AACA;AADA;AA8BA;AACA;AADA;AAGA;AACA;AA1BA;AACA;AACA;AAFA;AARA;AAYA;AACA;;;AAsBA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AAvDA;AACA;AAyDA;;;;A","sourceRoot":""}